#pragma kernel Update
#pragma kernel Clear
#pragma kernel Fill
#pragma kernel Denoise

#include "SH.cginc"

Texture3D<float4> _old0;
SamplerState sampler_old0;

Texture3D<float4> _old1;
SamplerState sampler_old1;

Texture3D<float4> _old2;
SamplerState sampler_old2;

Texture3D<float4> _old3;
SamplerState sampler_old3;

Texture3D<float4> _old4;
SamplerState sampler_old4;

Texture3D<float4> _old5;
SamplerState sampler_old5;

Texture3D<float4> _old6;
SamplerState sampler_old6;

RWTexture3D<float4> _new0;
RWTexture3D<float4> _new1;
RWTexture3D<float4> _new2;
RWTexture3D<float4> _new3;
RWTexture3D<float4> _new4;
RWTexture3D<float4> _new5;
RWTexture3D<float4> _new6;

float4 _Param0, _Param1;

[numthreads(8,8,8)]
void Update(uint3 id : SV_DispatchThreadID)
{
	float3 uv = float3(id + 0.5) / _Param0.w;
	uv += _Param0.xyz;
	uv = clamp(uv, 0 , 1);
	_new0[id] = _old0.SampleLevel(sampler_old0, uv, 0);
	_new1[id] = _old1.SampleLevel(sampler_old1, uv, 0);
}

[numthreads(8, 8, 8)]
void Clear(uint3 id : SV_DispatchThreadID)
{
	_new0[id] = 0;
	_new1[id] = 0;
	_new2[id] = 0;
	_new3[id] = 0;
	_new4[id] = 0;
	_new5[id] = 0;
	_new6[id] = 0;
}

StructuredBuffer<float4> posBuffer;
StructuredBuffer<float4> shBuffer;


[numthreads(8, 8, 8)]
void Fill(uint3 id : SV_DispatchThreadID)
{
	float3 spos = (float3(id + 0.5) / _Param0.y - 0.5) * _Param0.z + _Param1.xyz;
	float3 k[9]; float ws = 0.0000001;
	for (int j = 0; j < 9; j++)
	{
		k[j] = 0;
	}

	for (int i = 0; i < _Param0.x; i++)
	{
		float3 pos = posBuffer[i].xyz;

		float dis = distance(pos, spos);

		float weight = 1 / pow(10, dis);

		for (int m = 0; m < 9; m++)
		{
			k[m] += shBuffer[i * 9 + m].xyz * weight;
		}
		ws += weight;
	}
	for (int m = 0; m < 9; m++)
	{
		k[m] /= ws;
	}

	_new0[id] = float4(k[0].xyz, k[1].x);
	_new1[id] = float4(k[1].yz, k[2].xy);
	_new2[id] = float4(k[2].z, k[3].xyz);
	_new3[id] = float4(k[4].xyz, k[5].x);
	_new4[id] = float4(k[5].yz, k[6].xy);
	_new5[id] = float4(k[6].z, k[7].xyz);
	_new6[id] = float4(k[8].xyz, 0);
}

#define DenoiseCell(x) _new##x[id] = (_new##x[id] + _new##x[id+uint3(1,0,0)] + _new##x[id+uint3(-1,0,0)] + _new##x[id+uint3(0,1,0)] + _new##x[id+uint3(0,-1,0)] + _new##x[id+uint3(0,0,1)] + _new##x[id+uint3(0,0,-1)]) / 7;

[numthreads(8, 8, 8)]
void Denoise(uint3 id : SV_DispatchThreadID)
{
	DenoiseCell(0);
	DenoiseCell(1);
	DenoiseCell(2);
	DenoiseCell(3);
	DenoiseCell(4);
	DenoiseCell(5);
	DenoiseCell(6);
}



#pragma kernel Realtime_Batched_CubeMap2SH
#pragma kernel Update_Probe_In_Volume

#include "Montcalo_Library.hlsl"

TextureCubeArray<float4> CubeMapArray;
SamplerState samplerCubeMapArray;

StructuredBuffer<float3> dirs;

RWStructuredBuffer<int3> output;

[numthreads(256, 1, 1)]
void Realtime_Batched_CubeMap2SH(uint group_id : SV_GroupID, uint id : SV_GroupThreadID)
{
	float3 dir = dirs[id];

	uint3 p1 = ReverseBits32(asuint(dir.xy));
	uint2 p2 = (abs(dir.z) > abs(dir.y)) ? p1.zx : p1.zy;
	p2 = (p2 << 16) | (p2 >> 16);
	p2 = ((p2 & 0x33333333) << 2) | ((p2 & 0xcccccccc) >> 2);
	p2 = ((p2 & 0x0f0f0f0f) << 4) | ((p2 & 0xf0f0f0f0) >> 4);
	uint2 p = p1.xy + p2;

	float3 radians = 0;
	float3 tangent = 0;
	if (abs(dir.y) > 0.7) {
		tangent = cross(float3(0, 0, 1), dir);
	}
	else {
		tangent = cross(float3(0, 1, 0), dir);
	}
	float3 bi = cross(tangent, dir);

	half3x3 TangentToWorld = half3x3(tangent, bi, dir);

	for (int i = 0; i < 128; i++)
	{
		float2 random = Hammersley(i, 128, p);
		float3 v = mul(UniformSampleHemisphere(random).xyz, TangentToWorld);
		float4 c = CubeMapArray.SampleLevel(samplerCubeMapArray, float4(v, group_id), 0);
		c += step(c.a, 0) * 0.1; //Todo: should sample skybox
		radians += c;
	}
	radians /= 128;
	radians *= 10000;

	SH9 sh = SHCosineLobe(dir);

	int offset = group_id * 9;
	[unroll]
	for (uint i = 0; i < 9; ++i)
	{
		int3 value = (int3)(sh.c[i] * radians);
		InterlockedAdd(output[offset + i].x, value.x);
		InterlockedAdd(output[offset + i].y, value.y);
		InterlockedAdd(output[offset + i].z, value.z);
	}
}

StructuredBuffer<int3> sampleInfo;

[numthreads(4, 1, 1)]
void Update_Probe_In_Volume(uint id : SV_DispatchThreadID)
{
	int offset = id * 9;

	int3 index = sampleInfo[id];

	_new0[index] = float4(output[offset].xyz, output[offset + 1].x)* 4.908734375e-6f;
	_new1[index] = float4(output[offset + 1].yz, output[offset + 2].xy)* 4.908734375e-6f;
	_new2[index] = float4(output[offset + 2].z, output[offset + 3].xyz)* 4.908734375e-6f;
	_new3[index] = float4(output[offset + 4].xyz, output[offset + 5].x)* 4.908734375e-6f;
	_new4[index] = float4(output[offset + 5].yz, output[offset + 6].xy)* 4.908734375e-6f;
	_new5[index] = float4(output[offset + 6].z, output[offset + 7].xyz)* 4.908734375e-6f;
	_new6[index] = float4(output[offset + 8].xyz, 0)* 4.908734375e-6f;

	for (int i = 0; i < 9; i++)
	{
		output[offset + i] = 0;
	}
}
//4.908734375e-6f